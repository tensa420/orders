// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "order/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

type OrderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderRepository) EXPECT() *OrderRepository_Expecter {
	return &OrderRepository_Expecter{mock: &_m.Mock}
}

// CancelOrder provides a mock function with given fields: ctx, orderUUID
func (_m *OrderRepository) CancelOrder(ctx context.Context, orderUUID string) error {
	ret := _m.Called(ctx, orderUUID)

	if len(ret) == 0 {
		panic("no return value specified for CancelOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, orderUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderRepository_CancelOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelOrder'
type OrderRepository_CancelOrder_Call struct {
	*mock.Call
}

// CancelOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUUID string
func (_e *OrderRepository_Expecter) CancelOrder(ctx interface{}, orderUUID interface{}) *OrderRepository_CancelOrder_Call {
	return &OrderRepository_CancelOrder_Call{Call: _e.mock.On("CancelOrder", ctx, orderUUID)}
}

func (_c *OrderRepository_CancelOrder_Call) Run(run func(ctx context.Context, orderUUID string)) *OrderRepository_CancelOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrderRepository_CancelOrder_Call) Return(_a0 error) *OrderRepository_CancelOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderRepository_CancelOrder_Call) RunAndReturn(run func(context.Context, string) error) *OrderRepository_CancelOrder_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrder provides a mock function with given fields: ctx, order
func (_m *OrderRepository) CreateOrder(ctx context.Context, order entity.Order) error {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderRepository_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type OrderRepository_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - order entity.Order
func (_e *OrderRepository_Expecter) CreateOrder(ctx interface{}, order interface{}) *OrderRepository_CreateOrder_Call {
	return &OrderRepository_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, order)}
}

func (_c *OrderRepository_CreateOrder_Call) Run(run func(ctx context.Context, order entity.Order)) *OrderRepository_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Order))
	})
	return _c
}

func (_c *OrderRepository_CreateOrder_Call) Return(_a0 error) *OrderRepository_CreateOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderRepository_CreateOrder_Call) RunAndReturn(run func(context.Context, entity.Order) error) *OrderRepository_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrder provides a mock function with given fields: ctx, orderUUID
func (_m *OrderRepository) GetOrder(ctx context.Context, orderUUID string) (*entity.Order, error) {
	ret := _m.Called(ctx, orderUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 *entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Order, error)); ok {
		return rf(ctx, orderUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Order); ok {
		r0 = rf(ctx, orderUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_GetOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrder'
type OrderRepository_GetOrder_Call struct {
	*mock.Call
}

// GetOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUUID string
func (_e *OrderRepository_Expecter) GetOrder(ctx interface{}, orderUUID interface{}) *OrderRepository_GetOrder_Call {
	return &OrderRepository_GetOrder_Call{Call: _e.mock.On("GetOrder", ctx, orderUUID)}
}

func (_c *OrderRepository_GetOrder_Call) Run(run func(ctx context.Context, orderUUID string)) *OrderRepository_GetOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrderRepository_GetOrder_Call) Return(_a0 *entity.Order, _a1 error) *OrderRepository_GetOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepository_GetOrder_Call) RunAndReturn(run func(context.Context, string) (*entity.Order, error)) *OrderRepository_GetOrder_Call {
	_c.Call.Return(run)
	return _c
}

// PayOrder provides a mock function with given fields: ctx, info
func (_m *OrderRepository) PayOrder(ctx context.Context, info entity.PaymentInfo) error {
	ret := _m.Called(ctx, info)

	if len(ret) == 0 {
		panic("no return value specified for PayOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.PaymentInfo) error); ok {
		r0 = rf(ctx, info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderRepository_PayOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PayOrder'
type OrderRepository_PayOrder_Call struct {
	*mock.Call
}

// PayOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - info entity.PaymentInfo
func (_e *OrderRepository_Expecter) PayOrder(ctx interface{}, info interface{}) *OrderRepository_PayOrder_Call {
	return &OrderRepository_PayOrder_Call{Call: _e.mock.On("PayOrder", ctx, info)}
}

func (_c *OrderRepository_PayOrder_Call) Run(run func(ctx context.Context, info entity.PaymentInfo)) *OrderRepository_PayOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.PaymentInfo))
	})
	return _c
}

func (_c *OrderRepository_PayOrder_Call) Return(_a0 error) *OrderRepository_PayOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderRepository_PayOrder_Call) RunAndReturn(run func(context.Context, entity.PaymentInfo) error) *OrderRepository_PayOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
