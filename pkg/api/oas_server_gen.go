// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// HandleCancelOrder implements HandleCancelOrder operation.
	//
	// Отменить заказ.
	//
	// POST /api/v1/orders/{order_uuid}/cancel
	HandleCancelOrder(ctx context.Context, params HandleCancelOrderParams) (HandleCancelOrderRes, error)
	// HandleCreateOrder implements HandleCreateOrder operation.
	//
	// Создает новый заказ на основе деталей.
	//
	// POST /api/v1/orders
	HandleCreateOrder(ctx context.Context, req *CreateOrderRequest) (HandleCreateOrderRes, error)
	// HandleGetOrder implements HandleGetOrder operation.
	//
	// Получить заказ по UUID.
	//
	// GET /api/v1/orders/{order_uuid}
	HandleGetOrder(ctx context.Context, params HandleGetOrderParams) (HandleGetOrderRes, error)
	// HandlePayOrder implements HandlePayOrder operation.
	//
	// Проводит оплату заказа.
	//
	// POST /api/v1/orders/{order_uuid}/pay
	HandlePayOrder(ctx context.Context, req *PayOrderRequest, params HandlePayOrderParams) (HandlePayOrderRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
